import java.util.Arrays;
import java.util.NoSuchElementException;

public class PriorityQueue {
    private int[] heap;
    private int size;

    public PriorityQueue() {
        heap = new int[16];
        size = 0;
    }

    public void add(int value) {
        ensureCapacity();
        heap[size] = value;
        percolateUp(size);
        size++;
    }

    public int poll() {
        if (size == 0) {
            throw new NoSuchElementException();
        }
        int result = heap[0];
        size--;
        heap[0] = heap[size];
        percolateDown(0);
        return result;
    }

    private void percolateUp(int index) {
        int parentIndex = (index - 1) / 2;
        while (index > 0 && heap[index] < heap[parentIndex]) {
            swap(index, parentIndex);
            index = parentIndex;
            parentIndex = (index - 1) / 2;
        }
    }

    private void percolateDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int minIndex = index;
        if (leftChild < size && heap[leftChild] < heap[minIndex]) {
            minIndex = leftChild;
        }
        if (rightChild < size && heap[rightChild] < heap[minIndex]) {
            minIndex = rightChild;
        }
        if (minIndex != index) {
            swap(index, minIndex);
            percolateDown(minIndex);
        }
    }

    private void ensureCapacity() {
        if (size == heap.length) {
            heap = Arrays.copyOf(heap, size * 2);
        }
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    public static void main(String[] args) {
    PriorityQueue pass = new PriorityQueue();
    pass.add(5);
    pass.add(4);
    pass.swap(4, 5);
    int passport = pass.poll();
        System.out.println(passport);
    }
}
